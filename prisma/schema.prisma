// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model User {
  id                 String    @id @default(uuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  username          String?   @unique
  password          String?
  status            String    @default("offline")
  last_seen         DateTime  @default(now())
  created_at        DateTime  @default(now())
  avatar_url        String?
  verified          Boolean   @default(false)
  verification_token String?
  token_expires     DateTime?
  accounts          Account[]
  sessions          Session[]
  messages          Message[]
  files             File[]
  friends1          Friend[]  @relation("UserFriends1")
  friends2          Friend[]  @relation("UserFriends2")
  user_status       UserStatus[]

  @@map("users")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  sender_id  String
  sender     User     @relation(fields: [sender_id], references: [id])
  channel_id String
  type       String   @default("text")
  file_url   String?
  file_type  String?
  file_size  Int?     @default(0)
  is_deleted Boolean  @default(false)
  deleted_at DateTime?
}

model File {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  filename    String
  file_url    String
  file_type   String
  file_size   BigInt
  upload_date DateTime @default(now()) @map("uplaod_date")
  is_private  Boolean  @default(false)
}

model UserStatus {
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  status      String   @default("offline")
  last_updated DateTime @default(now())
  @@id([user_id])
}

model Friend {
  id          String   @id @default(uuid())
  user1_id    String
  user2_id    String
  status      String   @default("pending") // pending, accepted, blocked
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user1       User     @relation("UserFriends1", fields: [user1_id], references: [id])
  user2       User     @relation("UserFriends2", fields: [user2_id], references: [id])
  
  @@unique([user1_id, user2_id])
}
